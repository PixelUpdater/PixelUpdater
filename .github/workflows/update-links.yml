name: Update-Links

on:
  release:
    types:
      - published

jobs:
  update-links:
    runs-on: ubuntu-latest

    permissions:
        contents: write
    steps:
        - name: Check out repository
          uses: actions/checkout@v3
          with:
            submodules: true

        # https://github.com/actions/checkout/issues/290
        - name: Preserve tag annotations
          run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}

        - name: Get version from git describe
          id: get_version
          run: |
            version=$(git describe | sed -E 's/v([0-9]*\.[0-9]*)-([0-9]+)-g([0-9a-f]+)/v\1.r\2.g\3/')
            echo "version=$version" >> "$GITHUB_OUTPUT"

        - name: Validate gradle wrapper checksum
          uses: gradle/wrapper-validation-action@v1

        - name: Set up Java
          uses: actions/setup-java@v3
          with:
            distribution: temurin
            java-version: 17
            cache: gradle

        - name: update Json Release
          run: ./gradlew updateJsonRelease

        - name: Upload release-info
          uses: actions/upload-artifact@v3
          id: upload_release_info
          with:
            name: release.json
            path: app/build/distributions/release.json

        - name: Checkout
          uses: actions/checkout@v4
          with:
            ref: update-links

        - name: Download info.json
          uses: actions/download-artifact@v3
          with:
            name: release.json
          continue-on-error: true

        # Update the release.json file, commit and push
        - name: Update release.json
          run: |
            ls -al .
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add release.json
            git commit -m "Update release.json ${{ github.ref }}"
            git push origin update-links

#     steps:

#       - name: Determine Build-Release's run id
#         id: get_run_id
#         run: |
#           export GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"

#           # Fetch the latest workflow run associated with the workflow name
#           workflow_name="Build-Release"
#           owner="PixelUpdater"
#           repo="PixelUpdater"
#           run_info=$(gh api -X GET /repos/$owner/$repo/actions/workflows/$workflow_name/runs)

#           # Extract the run ID from the response
#           run_id=$(echo "$run_info" | jq -r '.workflow_runs[0].id')

#           # Check if the run ID is not empty
#           if [[ -n "$run_id" ]]; then
#             echo "Build-Release run id: $run_id"
#             echo "::set-output name=run_id::$run_id"
#           else
#             echo "No run found for the specified workflow."
#             exit 1
#           fi
#         shell: /usr/bin/bash -e {0}

#       - name: List downloaded artifacts
#         run: |
#           ls -l .

#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           ref: update-links

#       # Update the release.json file, commit and push
#       - name: Update release.json
#         run: |
#           ls -al .
#           git config user.name github-actions
#           git config user.email github-actions@github.com
#           git add release.json
#           git commit -m "Update release.json ${{ github.ref }}"
#           git push origin update-links

